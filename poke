#!/usr/bin/env python

import os
from re import template
import typer

app = typer.Typer()

@app.command()
def py(
    name=typer.Argument(
        "main", 
        help="The name of the python file being created",
        metavar="FileName")
    ):
    """
    Creates a python file using __name__ == "__main__"
    """

    template = '#!/usr/bin/env python\n\ndef main():\n\tpass\n\nif __name__ == "__main__":\n\tmain()'

    if os.path.exists(f"/{name}"):
        con = typer.confirm(f"File {name} already exists, are you sure you want to overwrite it")
        if not con:
            return

    with open(f"./{name}", "w+") as file:
        file.write(template)

@app.command()
def c(
    name=typer.Argument(
        "main", 
        help="The name of the C file being created | No need to add .c to the end",
        metavar="FileName")
    ):
    """Creates a C file"""

    template = '#include <stdio.h>\n\nint main(){\n\treturn 0;\n}'

    if os.path.exists(f"./{name}.c"):
        con = typer.confirm(f"File [{name}] already exists, are you sure you want to overwrite it")
        if not con:
            raise typer.Abort()

    with open(f"./{name}.c", "w+") as file:
        file.write(template)

@app.command()
def cpp(
    name=typer.Argument(
        "main", 
        help="The name of the c++ file being created | No need to add .cpp to the end",
        metavar="FileName")
    ):
    """Creates a c++ file"""

    template = '#include <iostream>\n\nint main(){\n\treturn 0;\n}'

    if os.path.exists(f"./{name}.c"):
        con = typer.confirm(f"File [{name}] already exists, are you sure you want to overwrite it")
        if not con:
            raise typer.Abort()

    with open(f"./{name}.cpp", "w+") as file:
        file.write(template)

@app.command()
def sh(
    name=typer.Argument(
        "main",
        help="The name of the bash file being created",
        metavar="FileName")
    ):
    """Creates a bash script"""

    template = "#!/bin/bash"

    if os.path.exists(f"./{name}"):
        con = typer.confirm(f"File [{name}] already exists, are you sure you want to overwrite it")
        if not con:
            raise typer.Abort()
    with open(f"./{name}", "w+") as file:
        file.write(template)

@app.command()
def html(
    name=typer.Argument(
        "index",
        help="The name of the HTML file being created",
        metavar="FileName"),
    css=typer.Argument(
        "styling",
        help="The name of the CSS file being used | No need to add the .css to the end",
        metavar="css - FileName"),
    js=typer.Argument(
        "main",
        help="The name of the JS file being used | No need to add the .js to the end",
        metavar="js - FileName"
    )
    ):
    """Creates a HTML file"""

    template = f"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<link rel='stylesheet' href='Assets/{css}'>\n\t\t<link rel='stylesheet' href='Assets/{js}'>\n\t</head>\n\t<body>\n\t</body>\n</html>"
    cssTemplate = "html, body {\n\tmargin:           0;\n\tpadding:          0;\n\toverflow:         hidden;\n\theight:           100%;\n\twidth:            100%;\n\tbackground-color: rgb(0, 0, 0);\n}\nsvg { width: 100%; height: 100%; }"

    if os.path.exists(f"./{name}"):
        con = typer.confirm(f"File [{name}] already exists, are you sure you want to overwrite it")
        if not con:
            raise typer.Abort()
    if not os.path.exists(f"./Assets/"):
        os.mkdir("./Assets")

    with open(f"./{name}", "w+") as file:
        file.write(template)
    with open(f"./Assets/{css}.css", "w+") as cssFile:
        cssFile.write(cssTemplate)
    with open(f"./Assets/{js}.js", "w+"):
        pass

if __name__ == "__main__":
    app()
